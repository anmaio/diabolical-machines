trigger:
  branches:
    include:
    - release/*
    exclude:
    - feature/*

name: $(Build.SourceBranchName)_$(date:yyyyMMdd)$(rev:.r)

pool:
  vmImage: ubuntu-latest

variables:
- name: dotenvFileDev
  value: '.dev.env'
- name: dotenvFileNode
  value: '.node.env'
- name: dotenvFileClient
  value: '.client.env'

stages:
# Run unit tests
- stage: test
  displayName: 'Test'
  condition: eq(variables['build.reason'], 'PullRequest')
  jobs:
  - deployment: test
    displayName: Unit tests
    environment: fr-tst
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - template: pipeline/templates/dotenv-download.yml@self
          - script: |
              docker compose up dev --build --detach --no-color --quiet-pull
              docker compose exec dev yarn install
              docker compose exec dev yarn test:local
            displayName: Run unit tests
          - template: pipeline/templates/docker-cleanup.yml@self

# Deploy to testnet
- stage: staging
  displayName: Staging
  condition: startsWith(variables['build.sourceBranch'], 'refs/heads/release')
  dependsOn: []
  jobs:
  - deployment: testnet
    displayName: Deploy to testnet
    environment: fr-stg
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - template: pipeline/templates/dotenv-download.yml@self
          - script: |
              docker compose up dev --build --detach --no-color --quiet-pull
              docker compose exec dev yarn install
              docker compose exec dev yarn deploy:goerli
            name: deploy
            displayName: Run deployment
          - template: pipeline/templates/docker-cleanup.yml@self
          # - Publish ABI to artifact repository
  # Replace placeholder job with job to deploy test front end

  # - job: downlad abi and inject into source folder
  #   - checkout: appRepo
  - job: testApp
    displayName: Deploy test app
    dependsOn: testnet
    steps:
      - script: |
          echo "PLACEHOLDER: Deploy your test front end app here..."

# Deploy to mainnet
- stage: prodution
  displayName: Production
  condition: startsWith(variables['build.sourceBranch'], 'refs/heads/release')
  dependsOn: staging
  jobs:
  - deployment: mainnet
    displayName: Deploy to mainnet
    environment: fr-prd
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - template: pipeline/templates/dotenv-download.yml@self
          # Replace placeholder with 'docker compose exec dev yarn deploy:mainnet'
          - script: |
              docker compose up dev --build --detach --no-color --quiet-pull
              docker compose exec dev yarn install
              docker compose exec dev yarn compile:local
              echo "PLACEHOLDER: Successfully deployed to mainnet."
            name: deploy
            displayName: Run deployment
          - template: pipeline/templates/docker-cleanup.yml@self